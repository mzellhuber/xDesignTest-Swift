#!/usr/bin/env swift

import Foundation
import SQLite3

enum SQLite3Error : Error {
	case connectionError(String)
	case queryError(String)
	case valueError(String)
	case otherError(String)
}

enum HillType : String{
	case munro = "MUN"
	case munroTop = "TOP"
}

enum OrderType: String{
	case ascending = "ASC"
	case descending = "DESC"
}

enum OrderCategory : String{
	case height = "\"Height (m)\""
	case alphabetically = "Name"
	case id = "\"Running No\""
}

class SQLite3Conn {
	var stmt: OpaquePointer? = nil
	var db: OpaquePointer? = nil
	
	init?() {
		let path = "\(FileManager.default.currentDirectoryPath)/munro.sqlite"
		
		if sqlite3_open(path, &db) != SQLITE_OK {
			return nil
		}
	}
	
	deinit {
		if let db = db {
			sqlite3_close(db)
		}
	}
}

extension SQLite3Conn {
	func prepareStatement(sql: String) throws -> OpaquePointer? {
		var statement: OpaquePointer? = nil
		guard sqlite3_prepare_v2(db, sql, -1, &statement, nil) == SQLITE_OK else {
			throw SQLite3Error.otherError("error")
		}
		return statement
	}
}

extension SQLite3Conn {

	func runQuery(query:String, orderByCategory: OrderCategory = OrderCategory.id, orderByType: OrderType = OrderType.ascending, maxResults: Int = 0){

		var finalQuery = query + " ORDER BY \(orderByCategory.rawValue) \(orderByType.rawValue)"

		if maxResults != 0 {
			finalQuery =  addLimit(query:finalQuery, limit:maxResults)
		}

		guard let queryStatement = try? prepareStatement(sql: finalQuery) else {
			return
		}

		while (sqlite3_step(queryStatement) == SQLITE_ROW) {
			//let id = sqlite3_column_int(queryStatement, 0)
			
			let queryResultNameCol = sqlite3_column_text(queryStatement, 5)
			let name = String(cString: queryResultNameCol!)
			let height = sqlite3_column_int(queryStatement, 9)

			let queryResultCategoryCol = sqlite3_column_text(queryStatement, 27)
			var category = String(cString: queryResultCategoryCol!)
			if category == "MUN"{
				category = "Munro"
			}else{
				category = "Munro Top"
			}

			let queryResultGridCol = sqlite3_column_text(queryStatement, 13)
			let grid = String(cString: queryResultGridCol!)

			// Each item should contain the name, height in meters, hill category and grid reference
			print("Name: \(name) | Height: \(height)m | Category: \(category) | Grid Reference: \(grid)")
		}
		
		sqlite3_finalize(queryStatement)
	}

	func addLimit(query:String, limit:Int) -> String{
		return query + " LIMIT 0,\(limit) "
	}

	func query(maxResults:Int = 0, orderByCategory: OrderCategory = OrderCategory.id, orderByType: OrderType = OrderType.ascending) {
		
		var querySql = "SELECT * FROM munro where \"Post 1997\" != ''"

		if maxResults != 0 {
			querySql =  addLimit(query:querySql, limit:maxResults)
		}
				
		runQuery(query:querySql, orderByCategory:orderByCategory, orderByType:orderByType)

	}
	
	func munroBy(id: Int32){
		let querySql = "SELECT * FROM munro WHERE \"Running No\" = \(id) and \"Post 1997\" != ''"
		runQuery(query:querySql)
	}

	func munroBy(name: String){
		let querySql = "SELECT * FROM munro WHERE Name = \"\(name)\" and \"Post 1997\" != ''"
		runQuery(query:querySql)
	}

	func munroBy(category: HillType, maxResults:Int = 0 , orderByCategory: OrderCategory = OrderCategory.id, orderByType: OrderType = OrderType.ascending){

		var cat = HillType.munroTop.rawValue
		if category == .munro{
			cat = HillType.munro.rawValue
		}
		
		let querySql = "SELECT * FROM munro where \"Post 1997\" = '\(cat)'"
		
		runQuery(query:querySql, orderByCategory:orderByCategory, orderByType:orderByType, maxResults:maxResults)
	}

	func munroBy(maxHeight:Int = 5000, maxResults:Int = 0, orderByCategory: OrderCategory = OrderCategory.id, orderByType: OrderType = OrderType.ascending){
		
		let querySql = "SELECT * FROM munro where \"Post 1997\" != '' and \"Height (m)\" < \(maxHeight)"

		runQuery(query:querySql, orderByCategory:orderByCategory, orderByType:orderByType, maxResults:maxResults)

	}

	func munroBy(minHeight:Int = 0, maxResults:Int = 0, orderByCategory: OrderCategory = OrderCategory.id, orderByType: OrderType = OrderType.ascending){
		
		let querySql = "SELECT * FROM munro where \"Post 1997\" != '' and \"Height (m)\" > \(minHeight)"

		runQuery(query:querySql, orderByCategory:orderByCategory, orderByType:orderByType, maxResults:maxResults)

	}

	func munroBy(minHeight:Int, maxHeight:Int, maxResults:Int = 0, orderByCategory: OrderCategory = OrderCategory.id, orderByType: OrderType = OrderType.ascending){
		if minHeight < maxHeight{
			let querySql = "SELECT * FROM munro where \"Post 1997\" != '' and \"Height (m)\" between \(minHeight) and \(maxHeight)"

			runQuery(query:querySql, orderByCategory:orderByCategory, orderByType:orderByType, maxResults:maxResults)

		}else{
			print("Error: min height should be smaller than max height")
			return
		}
	}
}

//Tests
let d = SQLite3Conn()!
//d.query(maxResults:10)
//d.munroBy(name:"Beinn a' Chleibh")
d.munroBy(id:1)
//d.munroBy(category:HillType.munro, maxResults:8)
//d.munroBy(minHeight:990, maxResults: 10, orderByCategory:OrderCategory.height)
//d.munroBy(minHeight:990, maxHeight:995, maxResults: 10, orderByCategory:OrderCategory.height)
//d.munroBy(minHeight:990, maxHeight:995, orderByCategory:OrderCategory.height, orderByType: OrderType.descending)
